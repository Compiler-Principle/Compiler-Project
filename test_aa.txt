int name[105];
int credit[105];
int prereq[105][400];
int grade[105];
int courses_len;
int nextCourses_len;

function int parseGrade(int g){
    int ret;
    ret = -1;
    if(g == 65){
        ret = 4;
    }
    if(g == 66){
        ret = 3;
    }
    if(g == 67){
        ret = 2;
    }
    if(g == 68){
        ret = 1;
    }
    if(g == 70){
        ret =0;
    }
    return ret;
}

function int strCount(int s[400], int c){
    int count, i;
    i = 0;
    count = 0;

    while(s[i] != 0){
        if(s[i] == c){
            count = count + 1;
        }
        i = i + 1;
    }
    return count;
}

function void summary(float gpa, int hAttempt, int hComplete, int cRemain, int courses[400]){
    int i;
    i = 0;

    cout("GPA: %.1f\n", gpa);
    cout("Hours Attempted: %d\n", hAttempt);
    cout("Hours Completed: %d\n", hComplete);
    cout("Credits Remaining: %d\n", cRemain);
    cout("\nPossible Courses to Take Next\n");
    while(i < nextCourses_len){
        cout("  c%d\n", courses[i]);
        i = i + 1;
    }
    if(nextCourses_len == 0){
        if(cRemain == 0){
            cout("  None - Congratulations!\n");
        }
    }
    return;
}

function int strContains(int basicString[400], int s) {
    int i;
    i = 0;
    while(basicString[i] != 0){
        if(basicString[i] == s){
            return 1;
        }
        i = i + 1;
    }
    return 0;
}

function int a2i(int p[400], int start){
    int cyc, ret;
    int i, t;
    i = 0;
    t = 0;
    while(i < start){
        t = t + 1;
        start = start - 1;
    }
    cyc = p[t];
    t = t + 1;
    ret = 0;

    while(cyc >= 48 && cyc <= 57){
        ret = 10 * ret + (cyc - 48);
        cyc = p[t];
        t = t + 1;
    }

    return ret;
}

function int strlen(int s[400]){
    int i;
    i = 0;
    while(s[i] != 0){
        i = i + 1;
    }
    return i;
}

function void memset(int i[400], int target, int len){
    int j;
    j = 0;
    while( j < len){
        i[j] = target;
        j = j + 1;
    }
    return;
}

function void strcpy(int dest[400], int src[400]){
    int i;
    i = 0;
    while(src[i] != 0){
        dest[i] = src[i];
        i = i + 1;
    }
    dest[i] = 0;
    return;
}

function void substr(int s[400], int sub[400], int start, int len){
    int i;
    i = 0;
    while(i < len){
        sub[i] = s[start + i];
        i = i + 1;
    }
    sub[i] = 0;
    return;
}

function int lineSplit(int input[400], int deli, int res[400][400]){
    int len, i, cnt, deli_count, ii;
    int delimiter_idx[100];
    int tmp[400];

    deli_count = strCount(input, deli);
    ii = 1;
    cnt = 0;

    delimiter_idx[deli_count+1] = strlen(input);
    i = 0;
    while(i < strlen(input)){
        if(input[i] == deli){
            delimiter_idx[ii] = i;
            ii = ii + 1;
        }
        i = i + 1;
    }

    i= 0;
    while( i < deli_count+1){
        if(i == 0){
            substr(input, tmp, delimiter_idx[i], delimiter_idx[i+1]-delimiter_idx[i]);
        }
        else{
            substr(input, tmp, delimiter_idx[i]+1, delimiter_idx[i+1]-delimiter_idx[i]-1);
        }
        strcpy(res[cnt], tmp);
        cnt = cnt + 1;
        i = i + 1;
    }
    return cnt;

}

function int main(){

    int course_cnt;
    int line[400];
    int t[105][400];
    int line_slice, hAttempt, hComplete, cRemain;
    float credit_score;

    int nextCourse[105];
    int canTake;
    int found;
    int i, ii;



    int pres_id;
    int l, k, this_course;



    int valid_pre_strs[105][400];
    int valid_pre_strs_len;
    int pre_strs[105][400];
    int pre_strs_len;


    hAttempt = 0;
    hComplete = 0;
    cRemain = 0;
    credit_score = 0.0;
    course_cnt = 0;
    valid_pre_strs_len = 0;
    pre_strs_len = 0;
    nextCourses_len = 0;



    return 0;
}